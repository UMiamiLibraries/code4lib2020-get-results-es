{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "http://localhost:4000/code4lib2020-get-results-es/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "Computer Setup",
    "content": "Git . Please verify you have Git installed in your computer by running the following command in a console. . $ git --version . You should get an output like the one below depending on your operating system. . git version 2.25.0.windows.1 . If you don&#39;t have Git installed, please refer to the following documentation to install it in your computer: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git . Docker and Docker-Composer setup . In this workshop, you will need to have Docker and Docker-Composer installed in your computer. Please follow the below installation instructions from the Docker official documentation, for the operating system you are running. . Docker for Mac | Docker for Windows 10 (Pro, Enterprise, or Education) | Docker for Ubuntu | . To verify Docker is installed correctly, please run the following command on a terminal: . $ docker run hello-world . This command should output the following: . Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ . You should also verify docker-compose is intalled. Please run the following command in a terminal: . $ docker-compose --version . Depending on the version of docker-compose you have installed, the output should look like this: . $ docker-compose version 1.25.0, build 0a186604 . Increase memory for Docker . For this workshop, we need to increase the amount of memory that Docker can use in the host computer. A limit of 4096 MB should be enough. . For hosts running Mac . Open Docker settings. | Select the Advanced tab. | Increase the memory limit to 4096 MB. | Docker for Mac Advanced Settings. . . For hosts running Windows . Open Docker settings. | Select the Advanced tab. | Increase the memory limit to 4096 MB. | Docker for Windows Advanced Settings. . . For hosts running Ubuntu . Open a terminal and run the following command: | sudo sysctl -w vm.max_map_count=4096000 . . Congratulations! Now you should have Docker and Docker-compose installed in your computer. In the next sections, we will go through the steps for creating a Dockerfile. . Previous: Welcome! Next: Project Setup .",
    "url": "http://localhost:4000/code4lib2020-get-results-es/computer-setup/",
    "relUrl": "/computer-setup/"
  }
  ,"2": {
    "title": "Creating the Dockerfile",
    "content": "Creating the Dockerfile . A Dockerfile contains all the commands needed to build a specific image. Think off a Dockerfile as a recipe to build an image. . Docker images are formed by multiple read-only layers that are representations of the instructions contained in the Dockerfile. Each layer builds on top of the previous layer. . Let&#39;s create a new file named Dockerfile in the .docker directory and add the following code to it. . #.docker/Dockerfile FROM appsvc/php:7.3-apache_20200101.1 . . We are instructing Docker to start FROM the pre-existing PHP and Apache image built by Microsoft, appsvc/php:7.3-apache_20200101.1. This pre-existing image is running a Linux distribution and php version 7.3 and apache, and it was created on January 1st, 2020. . Now, let&#39;s install composer. Add the following code to the Dockerfile. . #.docker/Dockerfile RUN curl -sS https://getcomposer.org/installer | php RUN mv composer.phar /usr/local/bin/composer &amp;&amp; chmod +x /usr/local/bin/composer &amp;&amp; composer --version . . The pre-existing image that we are using comes with PHP Opcache enabled. This extension helps to improve PHP performance by caching scripts in memory. However, since we are going to be using this container for development purposes, we want to disable caching for now. In order to do that, let&#39;s insert the following code into our Dockerfile. . #.docker/Dockerfile #Remove php opcache file -- only for development RUN rm -rf /usr/local/etc/php/conf.d/opcache-recommended.ini . . Synchronizing spin-up of independent containers . In this workshop we are going to have multiple containers running at the same time. However, we might run into a scenario where our development container depends on another container to work, and not only another container, but also the services running inside this other container to be up and running. . To address this problem, we are going to use wait-for-it, a bash script that will make our development container wait for any other container it depends on to continue. Add the following code to your Dockerfile: . #.docker/Dockerfile COPY ./wait-for-it/wait-for-it.sh /usr/local/wait-for-it.sh RUN chmod u+x /usr/local/wait-for-it.sh . . We also need to tell Docker that the container is going to be listening on a specific port at runtime. Please add the following code to the Dockerfile: . #.docker/Dockerfile EXPOSE 80 . . Our container will be listening to request on port 80 . Adding an ENTRYPOINT to the Dockerfile . An ENTRYPOINT will let us specify which commands we want to execute when the container is started. Let&#39;s, for now, add the following code to our Dockerfile . #.docker/Dockerfile COPY ./init.sh /usr/local/bin/init.sh RUN chmod u+x /usr/local/bin/init.sh ENTRYPOINT [&quot;/usr/local/bin/init.sh&quot;] . . But wait, the init.sh file does not exist. Let&#39;s create an init.sh file in the .docker directory and add the following code to it: . #!/usr/bin/env bash echo &quot;Checking Elasticsearch node 1 is ready&quot; /usr/local/wait-for-it.sh umle1data-0.local:9200 -s --timeout=60 -- echo &quot;Elasticsearch node 1 is ready!&quot; echo &quot;Checking Elasticsearch node 2 is ready&quot; /usr/local/wait-for-it.sh umle1data-1.local:9200 -s --timeout=60 -- echo &quot;Elasticsearch node 2 is ready!&quot; # start apache sed -i &quot;s/{PORT}/80/g&quot; /etc/apache2/apache2.conf /usr/sbin/apache2ctl -D FOREGROUND . . This code will wait for the Elasticsearch containers (we will create these in later sections) to be ready and then starts up the Apache server listening on port 80 too. . Previous: Project Setup Next: TBD .",
    "url": "http://localhost:4000/code4lib2020-get-results-es/creating-dockerfile/",
    "relUrl": "/creating-dockerfile/"
  }
  ,"3": {
    "title": "Welcome!",
    "content": "Next: Computer Setup .",
    "url": "http://localhost:4000/code4lib2020-get-results-es/index.html",
    "relUrl": "/index.html"
  }
  ,"4": {
    "title": "Project Setup",
    "content": "Project Setup . Let&#39;s get started with the project setup. We are going to clone a boilerplate project from GitHub. Run the following command from a console to clone the boilerplate code into your computer: . $ git clone https://github.com/UMiamiLibraries/get-results-es-boilerplate.git . . The boilerplate structure should look like this: . +-- .. |-- get-results-es-boilerplate | |-- .docker (This directory will contain all our Docker related files) | | |-- wait-for-it (We will get back to this directory in future sections of the workshop) | |-- ingester-app (Here we will create our ingester app) | | |-- composer.json (composer file with the required dependencies for the ingester app) | |-- search-app | | |-- composer.json (composer file with the required dependencies for the search app) | |-- docker-compose.yml (We will configure our application&#39;s services in this file) +-- .. . . In the next section we will start creating our Dockerfile. . Previous: Computer Setup Next: Creating the Dockerfile .",
    "url": "http://localhost:4000/code4lib2020-get-results-es/project-setup/",
    "relUrl": "/project-setup/"
  }
  
}